; PICA200 vertex shader which interpolates between two vertex coordinates
; Uniforms
.fvec projection[4]
.fvec interpfactor ; It's in the x of this
.fvec base
.fvec baseinterpfactor

; Constants
.constf constant(1.0, 1.0, 1.0, 1.0)
.alias ones constant.xxxx


; Outputs
.out outpos position
.out outclr color
.out outtc0 texcoord0
.out outtc1 texcoord1
.out outtc2 texcoord2

; Inputs (defined as aliases for convenience)
.alias posA v0
.alias posB v1
.alias intex v2

.bool test

; r0 = src1 r1 = src2 r2.x = blendfactor
; (src1 * (1-blendfactor)) + (src2 * blendfactor);
.proc mix
	add r3, ones, -r2.xxxx
	mul r4, r3, r0 ; r4 = src1 * (1-blendfactor) (this is the base/first pos here)
	mul r5, r1, r2.xxxx ; r5 = src2 * blendfactor (this is the second pos here)
	add r3, r4, r5 ; r3 = r4 + r5 and ret
.end

.proc main

	; Coordinates interpolation
	mov r0, v0
	mov r1, v1
	mov r2.x, interpfactor.x
	call mix

	; Base interpolation
	mov r0, base.xy
	mov r0.z, r3.z
	mov r1, r3
	mov r2.x, baseinterpfactor.x
	call mix
	
	; Force the w component of our final position to be 1.0
	mov r3.w,   ones

	; outpos = projectionMatrix * finalvalue
	dp4 outpos.x, projection[0], r3
	dp4 outpos.y, projection[1], r3
	dp4 outpos.z, projection[2], r3
	dp4 outpos.w, projection[3], r3

	; outclr = white
	mov outclr, ones

	; outtc0 = intex
	mov outtc0, intex
	; Move it to texcoord1 and texcoord2 as well so we can use units 1 and 2
	mov outtc1, intex
	mov outtc2, intex

	; We're finished
	end
.end
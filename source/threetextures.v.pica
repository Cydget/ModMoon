; PICA200 vertex shader that accepts three texcoords
; Not worth the extra data when more than one texcoord is barely
; ever used so this is a thing

; Uniforms
.fvec projection[4]

; Constants
.constf myconst(0.0, 1.0, -1.0, 0.1)
.constf myconst2(0.3, 0.0, 0.0, 0.0)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones

; Outputs
.out outpos position
.out outclr color
.out outtc0 texcoord0
.out outtc1 texcoord1
.out outtc2 texcoord2

; Inputs (defined as aliases for convenience)
.alias inpos v0
.alias intc0 v1
.alias intc1 v2
.alias intc2 v3

.bool test

.proc main
	; Force the w component of inpos to be 1.0
	mov r0.xyz, inpos
	mov r0.w,   ones

	; outpos = projectionMatrix * inpos
	dp4 outpos.x, projection[0], r0
	dp4 outpos.y, projection[1], r0
	dp4 outpos.z, projection[2], r0
	dp4 outpos.w, projection[3], r0

	; outclr = white
	mov outclr, ones

	; outtc0 = intex
	mov outtc0, intc0
	; Move it to texcoord1 and texcoord2 as well so we can use units 1 and 2
	mov outtc1, intc1
	mov outtc2, intc2

	; We're finished
	end
.end
